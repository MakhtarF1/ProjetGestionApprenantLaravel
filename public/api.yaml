openapi: 3.0.0
info:
  title: API Apprenant
  description: API pour la gestion des apprenants et authentification
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1
    description: Serveur local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Apprenant:
      type: object
      properties:
        id:
          type: string
        nom:
          type: string
        prenom:
          type: string
        adresse:
          type: string
        telephone:
          type: string
        email:
          type: string
        photo:
          type: string
        referentiel:
          type: string
        date_naissance:
          type: string
          format: date
        sexe:
          type: string
          enum: [M, F]
        qrCode:
          type: string
        isActive:
          type: boolean

    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

          
    Referentiel:
      type: object
      properties:
        id:
          type: string
        libelle:
          type: string
        description:
          type: string
        code:
          type: string
        competences:
          type: array
          items:
            $ref: '#/components/schemas/Competence'

    CreateReferentiel:
      type: object
      required:
        - libelle
        - description
        - code
      properties:
        libelle:
          type: string
        description:
          type: string
        code:
          type: string
        competences:
          type: array
          items:
            $ref: '#/components/schemas/Competence'

    UpdateReferentiel:
      type: object
      properties:
        libelle:
          type: string
        description:
          type: string
        competences:
          type: array
          items:
            $ref: '#/components/schemas/Competence'

    Competence:
      type: object
      properties:
        nom:
          type: string
        description:
          type: string
        modules:
          type: array
          items:
            $ref: '#/components/schemas/Module'

    Module:
      type: object
      properties:
        nom:
          type: string
        description:
          type: string
        duree_acquisition:
          type: integer


security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Auth
      summary: Authentification de l'utilisateur
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Authentification réussie
        '401':
          description: Identifiants incorrects
      security: []

  /apprenants/:
    post:
      tags:
        - Apprenant
      summary: Créer un nouvel apprenant
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nom:
                  type: string
                prenom:
                  type: string
                adresse:
                  type: string
                telephone:
                  type: string
                email:
                  type: string
                  format: email
                photo:
                  type: string
                referentiel:
                  type: string
                date_naissance:
                  type: string
                  format: date
                sexe:
                  type: string
                  enum: [M, F]
      responses:
        '201':
          description: Apprenant créé avec succès
        '422':
          description: Erreur de validation des données
        '400':
          description: Erreur lors de la création
      security:
        - bearerAuth: []

    get:
      tags:
        - Apprenant
      summary: Liste des apprenants
      parameters:
        - name: referentiel
          in: query
          description: Filtrer par référentiel
          schema:
            type: string
        - name: statut
          in: query
          description: Filtrer par statut (actif/inactif)
          schema:
            type: string
      responses:
        '200':
          description: Liste des apprenants

  /apprenants/import:
    post:
      tags:
        - Apprenant
      summary: Importer des apprenants via un fichier
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Importation réussie
        '400':
          description: Erreur lors de l'importation

  /apprenants/{id}:
    get:
      tags:
        - Apprenant
      summary: Afficher un apprenant par ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Détails de l'apprenant
        '404':
          description: Apprenant non trouvé
      security:
        - bearerAuth: []

  /apprenants/inactive:
    get:
      tags:
        - Apprenant
      summary: Liste des apprenants inactifs
      responses:
        '200':
          description: Liste des apprenants inactifs
      security:
        - bearerAuth: []

  /v1/apprenants/relance:
    post:
      tags:
        - Apprenant
      summary: Envoyer un rappel de relance à plusieurs apprenants inactifs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Rappels envoyés avec succès
        '422':
          description: Erreur de validation des données
      security:
        - bearerAuth: []

  /apprenants/{id}/relance:
    post:
      tags:
        - Apprenant
      summary: Envoyer un rappel de relance à un apprenant inactif
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rappel envoyé avec succès
        '404':
          description: Apprenant non trouvé
      security:
        - bearerAuth: []

  /promotions:
    post:
      summary: "Créer une nouvelle promotion"
      tags:
        - "Promotions"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  example: "Promo 2024"
                dateDebut:
                  type: string
                  format: date
                  example: "2024-01-01"
                dateFin:
                  type: string
                  format: date
                  example: "2024-12-31"
                photoCouverture:
                  type: string
                  nullable: true
                referentiels:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: "Promotion créée avec succès"
        400:
          description: "Erreur de validation ou exception"

    get:
      summary: "Lister toutes les promotions"
      tags:
        - "Promotions"
      responses:
        200:
          description: "Liste des promotions"
        400:
          description: "Erreur de requête"

  /promotions/{id}:
    patch:
      summary: "Mettre à jour une promotion"
      tags:
        - "Promotions"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  example: "Promo 2024"
                dateDebut:
                  type: string
                  format: date
                  example: "2024-01-01"
                dateFin:
                  type: string
                  format: date
                  example: "2024-12-31"
                photoCouverture:
                  type: string
                  nullable: true
      responses:
        200:
          description: "Promotion mise à jour avec succès"
        400:
          description: "Erreur de validation ou exception"

  /promotions/{id}/referentiels:
    patch:
      summary: "Mettre à jour les référentiels d'une promotion"
      tags:
        - "Promotions"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                referentiels:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: "Référentiels mis à jour"
        400:
          description: "Erreur de validation ou exception"
    
    get:
      summary: "Obtenir les référentiels d'une promotion"
      tags:
        - "Promotions"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Référentiels de la promotion"
        404:
          description: "Promotion ou référentiels non trouvés"

  /promotions/{id}/etat:
    patch:
      summary: "Mettre à jour l'état d'une promotion"
      tags:
        - "Promotions"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                etat:
                  type: string
                  enum: [Actif, Cloturer, Inactif]
                  example: "Actif"
      responses:
        200:
          description: "État mis à jour avec succès"
        400:
          description: "Erreur de validation ou exception"

  /promotions/encours:
    get:
      summary: "Obtenir la promotion en cours"
      tags:
        - "Promotions"
      responses:
        200:
          description: "Promotion en cours"
        404:
          description: "Aucune promotion en cours"

  /promotions/{id}/cloturer:
    patch:
      summary: "Clôturer une promotion"
      tags:
        - "Promotions"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Promotion clôturée"
        400:
          description: "Erreur ou promotion non clôturable"

  /promotions/{id}/stats:
    get:
      summary: "Obtenir les statistiques d'une promotion"
      tags:
        - "Promotions"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Statistiques de la promotion"
        404:
          description: "Promotion non trouvée"

  /referentiels:
    get:
      tags:
        - referentiels
      summary: Obtenir la liste des référentiels
      parameters:
        - name: etat
          in: query
          required: false
          schema:
            type: string
          description: Filtrer les référentiels par état
      responses:
        '200':
          description: Liste des référentiels récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Referentiel'

    post:
      tags:
        - referentiels
      summary: Créer un nouveau référentiel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReferentiel'
      responses:
        '201':
          description: Référentiel créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
        '400':
          description: Erreur lors de la création du référentiel

  /referentiels/{id}:
    get:
      tags:
        - referentiels
      summary: Obtenir les détails d'un référentiel spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du référentiel
      responses:
        '200':
          description: Détails du référentiel récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Referentiel'
        '404':
          description: Référentiel non trouvé

    patch:
      tags:
        - referentiels
      summary: Mettre à jour un référentiel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReferentiel'
      responses:
        '200':
          description: Référentiel mis à jour avec succès
        '400':
          description: Erreur lors de la mise à jour du référentiel

    delete:
      tags:
        - referentiels
      summary: Archiver un référentiel
      responses:
        '200':
          description: Référentiel archivé avec succès
        '400':
          description: Erreur lors de l'archivage du référentiel

  /referentiels/archive/referentiels:
    get:
      tags:
        - referentiels
      summary: Obtenir la liste des référentiels archivés
      responses:
        '200':
          description: Liste des référentiels archivés récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Referentiel'


  